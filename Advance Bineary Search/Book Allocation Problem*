You are given number of pages in n different books and m students. The books are arranged
in ascending order of number of pages. Every student is assigned to read some consecutive books.
The task is to assign books in such a way that the maximum number of pages assigned to a student is minimum.

Input Format
First line contains integer t as number of test cases. Next t lines contains two lines. 
For each test case, 1st line contains two integers n and m which represents the number 
of books and students and 2nd line contains n space separated integers which represents the number of pages of n books in ascending order.

Constraints
1 < t < 50
1< n < 100
1< m <= 50
1 <= Ai <= 1000

Output Format
Print the maximum number of pages that can be assigned to students.

Sample Input
1
4 2
12 34 67 90
Sample Output
113 


Explanation
1st students : 12 , 34, 67 (total = 113)
2nd students : 90 (total = 90)
Print max(113, 90)
______________________________________________________________________________________________________________

_____________________________________________________________________________________________________________________________---
intution-->whenver you have to do CONTIGUES allocation to certain MEMEBERS,and we have to MINIMIZE/MAXIMIZE certain value
    APPLY BINEARY SEARCH
    _____________________________________________________________________
           


import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-- >0){
            int n=sc.nextInt();
            int m=sc.nextInt();
            int[] arr=new int[n];
            for(int i=0;i<n;i++){
               arr[i]=sc.nextInt();
            }       
            
           int ans= pageallocate(arr,m);
           System.out.println(ans);

        }
    }
    
    // FUnction------>
    public static int pageallocate(int[] arr,int stu){
        int lo=0;
        int hi=0;
        for(int i=0;i<arr.length;i++){
            hi+=arr[i];
        }

       int ans=0;
       while(lo <= hi){
           int mid=(lo+hi)/2;
           if(ispossible(arr,mid,stu)){
               ans=mid;
               hi=mid-1;
           }else{
               lo=mid+1;
           }
       }

       return ans;
    }


    public static boolean ispossible(int[] arr,int mid,int student){
        int pageread=0;
        int studcount=1;

        for(int i=0;i<arr.length;i++){
            if(pageread+arr[i] <= mid){
                pageread+=arr[i];
            }else{
                studcount++;
                 if(studcount > student || arr[i] > mid){
                    return false;
                }
                pageread=arr[i];
               
            }
      }

      return true;
    }
}
//------------------------------------------monu bhia ispossible code
public static boolean isitpossilbe(int[] pages, int mid, int nos) {
	
		int student = 1;
		int read_page = 0;
		int i = 0;
		while (i < pages.length) {
			if (read_page + pages[i] <= mid) {
				read_page += pages[i];
				i++;
			} else {
				student++;
				read_page = 0;
			}

			if (student > nos) {
				return false;
			}
		}

		return true;
	}
