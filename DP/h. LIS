

Find the length of the longest subsequence in a given array A of integers such that all elements of the subsequence are sorted in strictly ascending order.

Input Format
The first line contains a single integer n.
Next line contains n space separated numbers denoting the elements of the array.

Constraints
0 < n< 105
0 < Ai < 105

Output Format
Print a single line containing a single integer denoting the length of the longest increasing subsequence.

Sample Input
6
50 3 10 7 40 80
Sample Output
4
Explanation
The longest subsequence in test case is : 3,7,40,80





======================================================================================Memoization===================================

import java.util.*;
public class Main {
    public static void main(String args[]) {
      Scanner sc=new Scanner(System.in);
	  int n=sc.nextInt();
	  int arr[]=new int[n];

	   int dp[][]=new int[n+1][n+1];
        for(int r[]: dp){
            Arrays.fill(r,-1);
        }

	  for(int i=0;i<n;i++){
		  arr[i]=sc.nextInt();
	  }

	  System.out.println(solveLIS(arr,-1,0,dp));
    }

	public static int solveLIS(int[] nums,int prevIndex,int currentIndex,int[][] dp){
        if(currentIndex >= nums.length) return 0;
        
        if(prevIndex !=-1 && dp[prevIndex][currentIndex]!=-1){
            return dp[prevIndex][currentIndex];
        }
        //pick 
        int pick=0;
        if(prevIndex==-1 ||nums[prevIndex] < nums[currentIndex]){
              pick= 1+solveLIS(nums,currentIndex,currentIndex+1,dp);
        }
        //notpick
        int notpick= solveLIS(nums,prevIndex,currentIndex+1,dp);
        
         if(prevIndex !=-1 ) //avoid negative index
           dp[prevIndex][currentIndex]=Math.max(pick,notpick);

      return Math.max(pick,notpick);

    }
}
