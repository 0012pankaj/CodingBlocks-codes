Any programmer worth his salt would be familiar with the famous Longest Common
Subsequence problem. Mancunian was asked to solve the same by an incompetent programmer.
As expected, he solved it in a flash. To complicate matters, a twist was introduced in the problem.

In addition to the two sequences, an additional parameter k was introduced.
A k-ordered LCS is defined to be the LCS of two sequences if you are allowed
to change atmost k elements in the first sequence to any value you wish to.
Can you help Mancunian solve this version of the classical problem?

Input Format
The first line contains three integers N, M and k, denoting the lengths of
the first and second sequences and the value of the provided parameter respectively.
The second line contains N integers denoting the elements of the first sequence. The 
third line contains M integers denoting the elements of the second sequence.

Constraints
1 <= N, M <= 2000
1 <= k <= 5
1 <= element in any sequence <= 109

Output Format
Print the answer in a new line.

Sample Input
5 5 1
1 2 3 4 5
5 3 1 4 2
Sample Output
3
__________________________________________________________________________________________________________________________________
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int k = sc.nextInt();

        int[] arr1 = new int[N];
        int[] arr2 = new int[M];

        for (int i = 0; i < N; i++) {
            arr1[i] = sc.nextInt();
        }

        for (int i = 0; i < M; i++) {
            arr2[i] = sc.nextInt();
        }

        Integer[][][] dp = new Integer[N + 1][M + 1][k + 1];
      
        int result = kOrderedLCS(N, M, k, arr1, arr2, 0, 0, dp);
        System.out.println(result);
    }

    public static int kOrderedLCS(int N, int M, int k, int[] arr1, int[] arr2, int i, int j, Integer [][][] dp) {
        if (i == N || j == M) {
            return 0;
        }

        if (dp[i][j][k] != null) {
            return dp[i][j][k]; 
        }

        int currentLCS = 0;

        if (arr1[i] == arr2[j]) {
            currentLCS = 1 + kOrderedLCS(N, M, k, arr1, arr2, i + 1, j + 1, dp);
        } else {
            currentLCS = Math.max(kOrderedLCS(N, M, k, arr1, arr2, i + 1, j, dp), kOrderedLCS(N, M, k, arr1, arr2, i, j + 1, dp));
			
			//-------------------------          
            if (0 < k) {
                currentLCS = 1 + kOrderedLCS(N, M, k -1, arr1, arr2, i + 1, j + 1, dp);
            }
			//---------------------
        }

        dp[i][j][k] = currentLCS; 
        return currentLCS;
    }
}
