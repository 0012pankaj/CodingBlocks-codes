Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins, In how many ways can we make the change? The order of coins doesnâ€™t matter.

Input Format
First line of input contain two space separated integers N and M. Second line of input contains M space separated integers - value of coins.

Constraints
1<=N<=250 1<=m<=50 1 <= Si <= 50

Output Format
Output a single integer denoting the number of ways to make the given change using given coin denominations.

Sample Input
10 4
2 5 3 6
Sample Output
5
Explanation
2 2 2 2 2
2 2 3 3
2 2 6
2 3 5
5 5

Total 5 ways
___________________________________________________________________________________________________________________________________________

import java.util.*;
public class Main {
    public static void main(String args[]) {
        // Your Code Here
		Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int n=sc.nextInt();
        int coins[]=new int[n];
        for(int i=0;i<n;i++)
		coins[i]=sc.nextInt();

		int[][] dp = new int[a + 1][coin.length];
		for(int r[]:dp){
			Arrays.fill(r,-1);
		}
		System.out.println(ChangeCoinfun(coin, a, 0, dp));
	}

    	public static int ChangeCoinfun(int[] coin, int amount, int i, int[][] dp) {
		if (amount == 0) {
			return 1;
		}
		if (i == coin.length) {
			return 0;
		}
		if (dp[amount][i] != -1) {
			return dp[amount][i];
		}
		int inc = 0, exc = 0;
		if (amount >= coin[i]) {
			inc = ChangeCoinfun(coin, amount - coin[i], i, dp);
		}
		exc = ChangeCoinfun(coin, amount, i + 1, dp);
		return dp[amount][i] = inc + exc;

	}
}
