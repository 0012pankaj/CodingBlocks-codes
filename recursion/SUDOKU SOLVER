Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.<br.

Input Format
First line contains a single integer N. Next N lines contains N integers each, where jth integer int ith line denotes the value at ith row and jth column in sudoku grid. This value is 0, if the cell is empty.

Constraints
N=9
At least one solution does exists for input matrix.

Output Format
Print N lines containing N integers each, where jth integer int ith line denotes the value at ith row and jth column in sudoku grid, such that all cells are filled.

Sample Input
9
5 3 0 0 7 0 0 0 0 
6 0 0 1 9 5 0 0 0 
0 9 8 0 0 0 0 6 0 
8 0 0 0 6 0 0 0 3 
4 0 0 8 0 3 0 0 1 
7 0 0 0 2 0 0 0 6 
0 6 0 0 0 0 2 8 0 
0 0 0 4 1 9 0 0 5 
0 0 0 0 8 0 0 7 9 
Sample Output
5 3 4 6 7 8 9 1 2 
6 7 2 1 9 5 3 4 8 
1 9 8 3 4 2 5 6 7 
8 5 9 7 6 1 4 2 3 
4 2 6 8 5 3 7 9 1 
7 1 3 9 2 4 8 5 6 
9 6 1 5 3 7 2 8 4 
2 8 7 4 1 9 6 3 5 
3 4 5 2 8 6 1 7 9 
_______________________________________________________________________________________



import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();

        int[][] board=new int[n][n];
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            { 
                board[i][j]=sc.nextInt();
            }
        }

        Ssolver(board,0,0);
    }
     
    //-----------------

    
    public static void Ssolver(int[][]board ,int row,int col)
    {   //base cases
       if(col==9){
           row++;
           col=0;
       }
         if(row==9){
             display(board);
             return;
           
         }  
       
       
       
     
          if(board[row][col]!= 0){
              Ssolver(board,row,col+1);
          }else{
               for(int val=1;val<=9;val++){
                if(ispossible(board,row,col,val)){
                  
                   board[row][col]=val;
                   Ssolver(board,row,col+1);
                   board[row][col]=0; //bacltrack
                }             
          }
      }
        
           
    }

    //-----------------------------
    public static boolean ispossible(int[][] board,int row,int col,int val)
    {
        //we need to check 3 condition row contain value,col contain value ,3*3 matrix contain value
        //1 row contains or not
        int r=0;
        while(r < 9)
        {
          if(board[r][col] == val)
          return false;
          r++;
        }

        //2.col wise check
        int c=0;
        while(c < 9)
        {
          if(board[row][c] == val )
          return false;
          
          c++;
        }

        //3. check in 3*3 matrix

        r=row-row%3; //To get starting index of current 3*3 matrix 
        c=col-col%3;

        for(int i=r;i<r+3;i++){
            for(int j=c;j<c+3;j++){
                if(board[i][j]== val )
                  return false;
            }
        }
       
       return true;
    }
    //--------------------Display 
    public static void display(int[][] board){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++)
            {
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
      
    }

}
